namespace FB;

struct UUID {
  u0: ubyte;
  u1: ubyte;
  u2: ubyte;
  u3: ubyte;
  u4: ubyte;
  u5: ubyte;
  u6: ubyte;
  u7: ubyte;
  u8: ubyte;
  u9: ubyte;
  u10: ubyte;
  u11: ubyte;
  u12: ubyte;
  u13: ubyte;
  u14: ubyte;
  u15: ubyte;
}

struct Date {
  timestamp_ns: int64;
}

struct Vector2 {
  x: float;
  y: float;
}

struct PathNode {
  position: Vector2;
  cubic_in: Vector2;
  cubic_out: Vector2;
}

table Path {
  node_ids: [UUID] (required);
  nodes: [PathNode] (required);
  is_closed: bool;
}

namespace FB.PathEvent.Update;

table Move {
  offset: Vector2 (required);
}

table NodeCreate {
  prev_node_id: UUID;
  node_id: UUID (required);
  node: PathNode (required);
}

table NodeDelete {
  node_id: UUID (required);
}

table NodeUpdate {
  node_id: UUID (required);
  node: PathNode (required);
}

union Kind {
  Move,
  NodeCreate,
  NodeDelete,
  NodeUpdate,
}

namespace FB.PathEvent;

table Create {
  path_id: UUID (required);
  path: Path (required);
}

table Delete {
  path_id: UUID (required);
}

table Update {
  path_id: UUID (required);
  kinds: [Update.Kind] (required);
}

union Kind {
  Create,
  Delete,
  Update,
}

namespace FB;

table PathEvent {
  kind: PathEvent.Kind (required);
}

namespace FB.DocumentEvent;

union Kind {
  FB.PathEvent,
}

namespace FB;

table DocumentEvent {
  id: UUID (required);
  time: Date (required);
  kind: DocumentEvent.Kind (required);
}
