syntax = "proto3";

package symbolic.pb;

// MARK: - basic types

// A UUID, encoded in accordance with section 4.1.2 of RFC 4122.
message UUID {
  // The higher 64 bits of the UUID, big-endian:
  // time_low (32) | time_mid (16) | time_hi_and_version (16)
  fixed64 hi = 1;

  // The lower 64 bits of the UUID, big-endian:
  // clock_seq_hi_and_reserved (8) | clock_seq_low (8) | node (48)
  fixed64 lo = 2;
}

message Vector2 {
  double x = 1;
  double y = 2;
}

message Point2 {
  double x = 1;
  double y = 2;
}

message Size2 {
  double width = 1;
  double height = 2;
}

message Angle { double radians = 1; }

message Color {
  double red = 1;
  double green = 2;
  double blue = 3;
  double alpha = 4;
}

enum PlaneInnerAlign {
  topLeading = 0;
  topCenter = 1;
  topTrailing = 2;
  centerLeading = 3;
  center = 4;
  centerTrailing = 5;
  bottomLeading = 6;
  bottomCenter = 7;
  bottomTrailing = 8;
}

// MARK: - path types

message PathNode {
  Point2 position = 1;
  Vector2 cubic_in = 2;
  Vector2 cubic_out = 3;
}

enum PathNodeControlType {
  cubicIn = 0;
  cubicOut = 1;
  quadraticOut = 2;
}

message PathSegment {
  Point2 from = 1;
  Point2 to = 2;
  Vector2 from_cubic_out = 3;
  Vector2 to_cubic_in = 4;
}

message Path {
  repeated UUID node_ids = 1;
  repeated PathNode nodes = 2;
  bool is_closed = 3;
}

enum PathNodeType {
  corner = 0;
  locked = 1;
  mirrored = 2;
}

enum PathSegmentType {
  cubic = 0;
  quadratic = 1;
}

// MARK: - grid

message Grid {
  message Cartesian { double interval = 1; }

  message Isometric {
    double interval = 1;
    Angle angle0 = 2;
    Angle angle1 = 3;
  }

  message Radial {
    double interval = 1;
    uint32 angular_divisions = 2;
  }

  Color tint_color = 1;

  oneof kind {
    Cartesian cartesian = 101;
    Isometric isometric = 102;
    Radial radial = 103;
  }
}
